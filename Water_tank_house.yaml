substitutions:
  name: "water-tank-house"
  friendly_name: "House Tank"
  tank_diameter: "3.565"       # Tank diameter in meters
  tank_spill_height: "2.17"    # Maximum water height in meters

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: "esphome.water-tank"
    version: "1.0"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Fallback AP configuration
  ap:
    ssid: "WaterTankSensorFallback"
    password: "fallback_password"

# Enable captive portal for Wi-Fi provisioning
captive_portal:

# Web server for debugging and control
web_server:
  port: 80

# Sets up Bluetooth LE (Only on ESP32) for Wi-Fi provisioning
esp32_improv:
  authorizer: none

# ADS1115 I2C sensor configuration
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true

ads1115:
  - address: 0x48

sensor:
  # Read voltage from ADS1115 (visible for debugging)
  - platform: ads1115
    multiplexer: A0_GND
    gain: 4.096
    name: "Water Tank Depth Voltage"
    id: tank_voltage
    update_interval: 1s

  # Calibrated water level with median filter
  - platform: template
    name: "Calibrated Water Tank Depth"
    id: tank_water_level
    unit_of_measurement: "m"
    accuracy_decimals: 2
    update_interval: 3s
    lambda: |-
      // Calibration values
      const float known_voltage = 2.387;   // Known voltage at a known water height
      const float known_height = 2.17;     // Known water height in meters
      
      // Calculate the scale factor and apply it
      return id(tank_voltage).state * (known_height / known_voltage);
    filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3

  # Tank Volume (kL) based on dimensions
  - platform: template
    name: "Tank Volume"
    id: tank_volume
    unit_of_measurement: "kL"
    accuracy_decimals: 2
    lambda: |-
      float radius = atof("${tank_diameter}") / 2.0;
      float height = atof("${tank_spill_height}");
      return 3.14159 * radius * radius * height;

  # Available Water (kL) based on filtered water level
  - platform: template
    name: "Available Water"
    id: available_water
    unit_of_measurement: "kL"
    accuracy_decimals: 2
    lambda: |-
      float radius = atof("${tank_diameter}") / 2.0;
      float level = id(tank_water_level).state;
      return 3.14159 * radius * radius * level;

  # Water Storage Percentage based on filtered water level
  - platform: template
    name: "Water Storage"
    id: water_storage_percentage
    unit_of_measurement: "%"
    accuracy_decimals: 1
    lambda: |-
      float max_volume = id(tank_volume).state;
      float current_volume = id(available_water).state;
      return (current_volume / max_volume) * 100.0;
